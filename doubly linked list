#include<stdio.h>  
#include<stdlib.h>  
struct node  
{  
    struct node *prev;  
    struct node *next;  
    int data;  
};  
struct node *head;  
void insertion_beg();  
void insertion_last();
void insertion_mid();    
void deletion_beg();  
void deletion_last();
void deletion_mid();    
void display();  
void search();
void exit();
void main ()  
{  
int choice =0;  
    while(choice != 9)  
    {  
        printf("\n****YOUR CHOICES****\n");  
        printf("\n===============================================\n");  
        printf("\n1.Insert in begining\n2.Insert at last\n3.Insert in mid\n4.Delete from Beginning\n5.Delete from last\n6.Delete from mid\n7.Search\n8.Show\n9.Exit\n");  
        printf("\nEnter your choice?\n");  
        scanf("\n%d",&choice);  
        switch(choice)  
        {  
            case 1:  
            insertion_beg();  
            break;
			  
            case 2:  
            insertion_last();  
            break;  
        
            
             case 3:  
            insertion_mid();  
            break; 
			
			 case 4:  
            deletion_beg();  
            break; 
              
            
            case 5:  
            deletion_last();  
            break;  
            
             case 6:  
            deletion_mid();  
            break;
			  
            case 7:  
            search();  
            break; 
			 
            case 8:  
            display();  
            break;
			  
            case 9:  
            exit(0);  
            break;
			  
            default:  
            printf("SORRY!!!  ...INVALID CHOICE");  
        }  
    }  
}  
void insertion_beg()  
{  
   struct node *ptr;   
   int item;  
   ptr = (struct node *)malloc(sizeof(struct node));  
   if(ptr == NULL)  
   {  
       printf("\nOVERFLOW");  
   }  
   else  
   {  
    printf("\nEnter element to insert");  
    scanf("%d",&item);  
      
   if(head==NULL)  
   {  
       ptr->next = NULL;  
       ptr->prev=NULL;  
       ptr->data=item;  
       head=ptr;  
   }  
   else   
   {  
       ptr->data=item;  
       ptr->prev=NULL;  
       ptr->next = head;  
       head->prev=ptr;  
       head=ptr;  
   }  
   
}  
     
}  
void insertion_last()  
{  
   struct node *ptr,*temp;  
   int item;  
   ptr = (struct node *) malloc(sizeof(struct node));  
   if(ptr == NULL)  
   {  
       printf("\nOVERFLOW");  
   }  
   else  
   {  
       printf("\nEnter value");  
       scanf("%d",&item);  
        ptr->data=item;  
       if(head == NULL)  
       {  
           ptr->next = NULL;  
           ptr->prev = NULL;  
           head = ptr;  
       }  
       else  
       {  
          temp = head;  
          while(temp->next!=NULL)  
          {  
              temp = temp->next;  
          }  
          temp->next = ptr;  
          ptr ->prev=temp;  
          ptr->next = NULL;  
          }  
             
       }  
      
    }  
void insertion_mid()
{
	struct node *data,*item;
	struct node *curr=(struct node *)malloc(sizeof(struct node));
	curr->item=data;
	curr->prev=NULL;
	curr->next=NULL;
	
	if(head==NULL)
	head=curr;
	else
	{
		printf("enter node after which u want to enter the element");
		scanf("%d",&data);
		
		struct node *temp=head;
		while(temp!=data&&temp->next!=NULL)
		temp=temp->next;
		curr->next=temp->next;
		(temp->next)->prev=curr;
		temp->next=curr;
		curr->prev=temp;	
	}
}
 
void deletion_beg()  
{  
    struct node *ptr;  
    if(head == NULL)  
    {  
        printf("\n UNDERFLOW");  
    }  
    else if(head->next == NULL)  
    {  
        head = NULL;   
        free(head);  
        printf("\nnode deleted\n");  
    }  
    else  
    {  
        ptr = head;  
        head = head -> next;  
        head -> prev = NULL;  
        free(ptr);  
        printf("\nnode deleted\n");  
    }  
  
}  
void deletion_last()  
{  
    struct node *ptr;  
    if(head == NULL)  
    {  
        printf("\n UNDERFLOW");  
    }  
    else if(head->next == NULL)  
    {  
        head = NULL;   
        free(head);   
        printf("\nnode deleted\n");  
    }  
    else   
    {  
        ptr = head;   
        if(ptr->next != NULL)  
        {  
            ptr = ptr -> next;   
        }  
        ptr -> prev -> next = NULL;   
        free(ptr);  
        printf("\nnode deleted\n");  
    }  
}  
  
  void deletion_mid()
  {
  	struct node *item,*data;
  	struct node *temp=head;
  	while(temp->data!=item && temp->next!=NULL)
  	temp=temp->next;
  	(temp->next)->prev=temp->prev;
  	(temp->prev)->next=temp->next;
  	printf("deleted element is %d",temp->data);
  	free(temp);
  }
void display()  
{  
    struct node *ptr;  
    printf("\n Values on the list are :: \n");  
    ptr = head;  
    while(ptr != NULL)  
    {  
        printf("%d\n",ptr->data);  
        ptr=ptr->next;  
    }  
}   
void search()  
{  
    struct node *ptr;  
    int item,i=0,flag;  
    ptr = head;   
    if(ptr == NULL)  
    {  
        printf("\nEmpty List\n");  
    }  
    else  
    {   
        printf("\nEnter item which you want to search?\n");   
        scanf("%d",&item);  
        while (ptr!=NULL)  
        {  
            if(ptr->data == item)  
            {  
                printf("\nitem found at location %d ",i+1);  
                flag=0;  
                break;  
            }   
            else  
            {  
                flag=1;  
            }  
            i++;  
            ptr = ptr -> next;  
        }  
        if(flag==1)  
        {  
            printf("\nItem not found\n");  
        }  
    }     
   void exit()
   {
   
   exit(0);
   }
		  }       


